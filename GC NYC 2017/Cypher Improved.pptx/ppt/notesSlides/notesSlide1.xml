<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<p:notes xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships" xmlns:p="http://schemas.openxmlformats.org/presentationml/2006/main" showMasterSp="0" showMasterPhAnim="0"><p:cSld><p:spTree><p:nvGrpSpPr><p:cNvPr id="1" name="Shape 300" /><p:cNvGrpSpPr /><p:nvPr /></p:nvGrpSpPr><p:grpSpPr><a:xfrm><a:off x="0" y="0" /><a:ext cx="0" cy="0" /><a:chOff x="0" y="0" /><a:chExt cx="0" cy="0" /></a:xfrm></p:grpSpPr><p:sp><p:nvSpPr><p:cNvPr id="301" name="Shape 301" /><p:cNvSpPr><a:spLocks noGrp="1" noRot="1" noChangeAspect="1" /></p:cNvSpPr><p:nvPr><p:ph type="sldImg" idx="2" /></p:nvPr></p:nvSpPr><p:spPr><a:xfrm><a:off x="381000" y="685800" /><a:ext cx="6096000" cy="3429000" /></a:xfrm><a:custGeom><a:avLst /><a:gdLst /><a:ahLst /><a:cxnLst /><a:rect l="0" t="0" r="0" b="0" /><a:pathLst><a:path w="120000" h="120000" extrusionOk="0"><a:moveTo><a:pt x="0" y="0" /></a:moveTo><a:lnTo><a:pt x="120000" y="0" /></a:lnTo><a:lnTo><a:pt x="120000" y="120000" /></a:lnTo><a:lnTo><a:pt x="0" y="120000" /></a:lnTo><a:close /></a:path></a:pathLst></a:custGeom></p:spPr></p:sp><p:sp><p:nvSpPr><p:cNvPr id="302" name="Shape 302" /><p:cNvSpPr txBox="1"><a:spLocks noGrp="1" /></p:cNvSpPr><p:nvPr><p:ph type="body" idx="1" /></p:nvPr></p:nvSpPr><p:spPr><a:xfrm><a:off x="685800" y="4343400" /><a:ext cx="5486400" cy="4114800" /></a:xfrm><a:prstGeom prst="rect"><a:avLst /></a:prstGeom></p:spPr><p:txBody><a:bodyPr wrap="square" lIns="91425" tIns="91425" rIns="91425" bIns="91425" anchor="t" anchorCtr="0"><a:noAutofit /></a:bodyPr><a:lstStyle /><a:p><a:pPr lvl="0" rtl="0"><a:spcBef><a:spcPts val="0" /></a:spcBef><a:buNone /></a:pPr><a:r><a:rPr lang="en" dirty="0" /><a:t>Constraints:</a:t></a:r></a:p><a:p><a:pPr marL="457200" lvl="0" indent="-228600" rtl="0"><a:spcBef><a:spcPts val="0" /></a:spcBef><a:buChar char="●" /></a:pPr><a:r><a:rPr lang="en" dirty="0" /><a:t>~8 minutes</a:t></a:r></a:p><a:p><a:pPr marL="457200" lvl="0" indent="-228600" rtl="0"><a:spcBef><a:spcPts val="0" /></a:spcBef><a:buChar char="●" /></a:pPr><a:r><a:rPr lang="en" dirty="0" /><a:t>~10 slides</a:t></a:r></a:p><a:p><a:pPr lvl="0" rtl="0"><a:spcBef><a:spcPts val="0" /></a:spcBef><a:buNone /></a:pPr><a:r><a:rPr lang="en" dirty="0" /><a:t>Contents “Neo4j 3.3”:</a:t></a:r></a:p><a:p><a:pPr marL="457200" lvl="0" indent="-228600" rtl="0"><a:spcBef><a:spcPts val="0" /></a:spcBef><a:buChar char="●" /></a:pPr><a:r><a:rPr lang="en" dirty="0" /><a:t>The dirty secret is that we have gotten really far with Cypher on a fairly naïve implementation</a:t></a:r></a:p><a:p><a:pPr marL="457200" lvl="0" indent="-228600" rtl="0"><a:spcBef><a:spcPts val="0" /></a:spcBef><a:buChar char="●" /></a:pPr><a:r><a:rPr lang="en" dirty="0" /><a:t>We’ve taken a deep look at how we represent data during query execution</a:t></a:r></a:p><a:p><a:pPr marL="914400" lvl="1" indent="-228600" rtl="0"><a:spcBef><a:spcPts val="0" /></a:spcBef><a:buChar char="○" /></a:pPr><a:r><a:rPr lang="en" dirty="0" /><a:t>used to be based on the representations of the programming language</a:t></a:r></a:p><a:p><a:pPr marL="914400" lvl="1" indent="-228600" rtl="0"><a:spcBef><a:spcPts val="0" /></a:spcBef><a:buChar char="○" /></a:pPr><a:r><a:rPr lang="en" dirty="0" /><a:t>has been rebuilt to directly serve the graph data structures (“Values”)</a:t></a:r></a:p><a:p><a:pPr marL="914400" lvl="1" indent="-228600" rtl="0"><a:spcBef><a:spcPts val="0" /></a:spcBef><a:buChar char="○" /></a:pPr><a:r><a:rPr lang="en" dirty="0" /><a:t>more sympathetic to the machine by having less indirection between code doing work and data being operated on (Values + Slotted)</a:t></a:r></a:p><a:p><a:pPr marL="1371600" lvl="2" indent="-228600" rtl="0"><a:spcBef><a:spcPts val="0" /></a:spcBef><a:buChar char="■" /></a:pPr><a:r><a:rPr lang="en" dirty="0" /><a:t>Example: don’t use tables for symbolic lookup of data, compile the query to know the location (“Slotted” in a nutshell)</a:t></a:r></a:p><a:p><a:pPr marL="457200" lvl="0" indent="-228600" rtl="0"><a:spcBef><a:spcPts val="0" /></a:spcBef><a:buChar char="●" /></a:pPr><a:r><a:rPr lang="en" dirty="0" /><a:t>We’ve taken a deep look at what whole queries look like when running</a:t></a:r></a:p><a:p><a:pPr marL="914400" lvl="1" indent="-228600" rtl="0"><a:spcBef><a:spcPts val="0" /></a:spcBef><a:buChar char="○" /></a:pPr><a:r><a:rPr lang="en" dirty="0" /><a:t>Eliminate unnecessary work.</a:t></a:r></a:p><a:p><a:pPr marL="914400" lvl="1" indent="-228600" rtl="0"><a:spcBef><a:spcPts val="0" /></a:spcBef><a:buChar char="○" /></a:pPr><a:r><a:rPr lang="en" dirty="0" err="1" /><a:t>Analyse</a:t></a:r><a:r><a:rPr lang="en" dirty="0" /><a:t> operators in the context of a whole query</a:t></a:r></a:p><a:p><a:pPr marL="914400" lvl="1" indent="-228600" rtl="0"><a:spcBef><a:spcPts val="0" /></a:spcBef><a:buChar char="○" /></a:pPr><a:r><a:rPr lang="en" dirty="0" /><a:t>Checks that make sense in each individual place are superfluous when repeated in in every place.</a:t></a:r></a:p><a:p><a:pPr marL="457200" lvl="0" indent="-228600" rtl="0"><a:spcBef><a:spcPts val="0" /></a:spcBef><a:buChar char="●" /></a:pPr><a:r><a:rPr lang="en" dirty="0" /><a:t>More (type) analysis</a:t></a:r></a:p><a:p><a:pPr marL="914400" lvl="1" indent="-228600" rtl="0"><a:spcBef><a:spcPts val="0" /></a:spcBef><a:buChar char="○" /></a:pPr><a:r><a:rPr lang="en" dirty="0" /><a:t>will allow specializing execution and representation in next version</a:t></a:r></a:p><a:p><a:pPr marL="914400" lvl="1" indent="-228600" rtl="0"><a:spcBef><a:spcPts val="0" /></a:spcBef><a:buChar char="○" /></a:pPr><a:r><a:rPr lang="en" dirty="0" /><a:t>will allow specializing plans to specific parameters</a:t></a:r></a:p><a:p><a:pPr lvl="0" rtl="0"><a:spcBef><a:spcPts val="0" /></a:spcBef><a:buNone /></a:pPr><a:r><a:rPr lang="en" dirty="0" /><a:t>Content “The Future”:</a:t></a:r></a:p><a:p><a:pPr marL="457200" lvl="0" indent="-228600" rtl="0"><a:spcBef><a:spcPts val="0" /></a:spcBef></a:pPr><a:r><a:rPr lang="en" dirty="0" /><a:t>Focus: Remove layers of indirection</a:t></a:r></a:p><a:p><a:pPr marL="914400" lvl="1" indent="-228600" rtl="0"><a:spcBef><a:spcPts val="0" /></a:spcBef></a:pPr><a:r><a:rPr lang="en" dirty="0" /><a:t>Neo4j has been developed for over 16 years now, so the Fundamental Theorem of Software Engineering has been applied quite a few times:</a:t></a:r><a:br><a:rPr lang="en" dirty="0" /></a:br><a:r><a:rPr lang="en" i="1" dirty="0" /><a:t>Any problem can be solved by adding another layer of indirection</a:t></a:r></a:p><a:p><a:pPr marL="914400" lvl="1" indent="-228600" rtl="0"><a:spcBef><a:spcPts val="0" /></a:spcBef></a:pPr><a:r><a:rPr lang="en" dirty="0" /><a:t>Now we are focusing on taking the unnecessary indirections out</a:t></a:r></a:p><a:p><a:pPr marL="1371600" lvl="2" indent="-228600" rtl="0"><a:spcBef><a:spcPts val="0" /></a:spcBef></a:pPr><a:r><a:rPr lang="en" dirty="0" /><a:t>Less indirection - Fewer data fetches - fewer execution stalls</a:t></a:r></a:p><a:p><a:pPr marL="1371600" lvl="2" indent="-228600" rtl="0"><a:spcBef><a:spcPts val="0" /></a:spcBef></a:pPr><a:r><a:rPr lang="en" dirty="0" /><a:t>Less code to execute - more sympathetic to optimizing compiler</a:t></a:r></a:p><a:p><a:pPr marL="1371600" lvl="2" indent="-228600" rtl="0"><a:spcBef><a:spcPts val="0" /></a:spcBef></a:pPr><a:r><a:rPr lang="en" dirty="0" /><a:t>Fewer data copies - less memory usage</a:t></a:r></a:p><a:p><a:pPr marL="457200" lvl="0" indent="-228600" rtl="0"><a:spcBef><a:spcPts val="0" /></a:spcBef></a:pPr><a:r><a:rPr lang="en" dirty="0" /><a:t>Focus: More efficient patterns of execution</a:t></a:r></a:p><a:p><a:pPr marL="914400" lvl="1" indent="-228600" rtl="0"><a:spcBef><a:spcPts val="0" /></a:spcBef></a:pPr><a:r><a:rPr lang="en" dirty="0" /><a:t>With 3.2 we introduced Compiled runtime, in the lab we have mixed-mode, providing compiled benefits to all queries</a:t></a:r></a:p><a:p><a:pPr marL="914400" lvl="1" indent="-228600" rtl="0"><a:spcBef><a:spcPts val="0" /></a:spcBef></a:pPr><a:r><a:rPr lang="en" dirty="0" /><a:t>Batched operators - do all work we can with one piece of memory before loading more memory</a:t></a:r><a:br><a:rPr lang="en" dirty="0" /></a:br><a:r><a:rPr lang="en" dirty="0" /><a:t>+ order memory access to further </a:t></a:r><a:r><a:rPr lang="en" dirty="0" err="1" /><a:t>effectivize</a:t></a:r><a:endParaRPr lang="en" dirty="0" /></a:p></p:txBody></p:sp></p:spTree><p:extLst><p:ext uri="{BB962C8B-B14F-4D97-AF65-F5344CB8AC3E}"><p14:creationId xmlns:p14="http://schemas.microsoft.com/office/powerpoint/2010/main" val="1205785166" /></p:ext></p:extLst></p:cSld><p:clrMapOvr><a:masterClrMapping /></p:clrMapOvr></p:notes>